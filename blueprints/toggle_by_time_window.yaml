blueprint:
  name: Toggle automation by time window
  description: Enables/disables a target automation between two times (handles overnight).
  domain: automation
  author: Samuel Pietra
  input:
    begin_time:
      name: Begin time
      description: When the target automation should be enabled.
      selector:
        time: {}
    end_time:
      name: End time
      description: When the target automation should be disabled.
      selector:
        time: {}
    target_automation:
      name: Target automation
      description: The automation to toggle (can be one or many).
      selector:
        target:
          entity:
            domain: automation

trigger:
  - platform: time
    at: !input begin_time
    id: begin
  - platform: time
    at: !input end_time
    id: end
  - platform: homeassistant # keep state correct after restart
    event: start
    id: startup
  - platform: event # and after editing automations
    event_type: automation_reloaded
    id: reload

variables:
  begin: !input begin_time
  end: !input end_time

  now_date: '{{ now() }}'
  begin_date: '{{ today_at(begin) }}'
  end_date: '{{ today_at(end) }}'
  in_window: >-
    {% if begin_date <= end_date %}  {# if same day #}
      {{ begin_date <= now_date < end_date }}
    {% else %}  {# (e.g. if window crosses midnight #}
      {{ now_date >= begin_date or now_date < end_date }}
    {% endif %}

action:
  - choose:
      # Sync on startup / reload
      - conditions: "{{ trigger.id in ['startup','reload'] }}"
        sequence:
          - choose:
              - conditions: '{{ in_window }}'
                sequence:
                  - action: automation.turn_on
                    target: !input target_automation
              - conditions: '{{ not in_window }}'
                sequence:
                  - action: automation.turn_off
                    target: !input target_automation

      # Toggle at explicit boundaries
      - conditions: "{{ trigger.id == 'begin' }}"
        sequence:
          - action: automation.turn_on
            target: !input target_automation
      - conditions: "{{ trigger.id == 'end' }}"
        sequence:
          - action: automation.turn_off
            target: !input target_automation

mode: single
max_exceeded: silent
